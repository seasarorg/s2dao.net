//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.832
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Seasar.Dao.Tests.Impl {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("EmployeeDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EmployeeDataSet : System.Data.DataSet {
        
        private EmpAndDeptDataTable tableEmpAndDept;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EmployeeDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmpAndDept"] != null)) {
                    base.Tables.Add(new EmpAndDeptDataTable(ds.Tables["EmpAndDept"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpAndDeptDataTable EmpAndDept {
            get {
                return this.tableEmpAndDept;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            EmployeeDataSet cln = ((EmployeeDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EmpAndDept"] != null)) {
                    base.Tables.Add(new EmpAndDeptDataTable(ds.Tables["EmpAndDept"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmpAndDept = ((EmpAndDeptDataTable)(base.Tables["EmpAndDept"]));
            if ((initTable == true)) {
                if ((this.tableEmpAndDept != null)) {
                    this.tableEmpAndDept.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EmployeeDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EmployeeDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmpAndDept = new EmpAndDeptDataTable();
            base.Tables.Add(this.tableEmpAndDept);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpAndDept() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            EmployeeDataSet ds = new EmployeeDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EmpAndDeptRowChangeEventHandler(object sender, EmpAndDeptRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpAndDeptDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDEPTNO;
            
            private System.Data.DataColumn columnDNAME;
            
            private System.Data.DataColumn columnLOC;
            
            private System.Data.DataColumn columnEMPNO;
            
            private System.Data.DataColumn columnENAME;
            
            private System.Data.DataColumn columnJOB;
            
            private System.Data.DataColumn columnMGR;
            
            private System.Data.DataColumn columnHIREDATE;
            
            private System.Data.DataColumn columnSAL;
            
            private System.Data.DataColumn columnCOMM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptDataTable() {
                this.TableName = "EmpAndDept";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpAndDeptDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpAndDeptDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DEPTNOColumn {
                get {
                    return this.columnDEPTNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DNAMEColumn {
                get {
                    return this.columnDNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LOCColumn {
                get {
                    return this.columnLOC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMPNOColumn {
                get {
                    return this.columnEMPNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ENAMEColumn {
                get {
                    return this.columnENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JOBColumn {
                get {
                    return this.columnJOB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MGRColumn {
                get {
                    return this.columnMGR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HIREDATEColumn {
                get {
                    return this.columnHIREDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SALColumn {
                get {
                    return this.columnSAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMMColumn {
                get {
                    return this.columnCOMM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptRow this[int index] {
                get {
                    return ((EmpAndDeptRow)(this.Rows[index]));
                }
            }
            
            public event EmpAndDeptRowChangeEventHandler EmpAndDeptRowChanging;
            
            public event EmpAndDeptRowChangeEventHandler EmpAndDeptRowChanged;
            
            public event EmpAndDeptRowChangeEventHandler EmpAndDeptRowDeleting;
            
            public event EmpAndDeptRowChangeEventHandler EmpAndDeptRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpAndDeptRow(EmpAndDeptRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptRow AddEmpAndDeptRow(decimal DEPTNO, string DNAME, string LOC, decimal EMPNO, string ENAME, string JOB, decimal MGR, System.DateTime HIREDATE, decimal SAL, decimal COMM) {
                EmpAndDeptRow rowEmpAndDeptRow = ((EmpAndDeptRow)(this.NewRow()));
                rowEmpAndDeptRow.ItemArray = new object[] {
                        DEPTNO,
                        DNAME,
                        LOC,
                        EMPNO,
                        ENAME,
                        JOB,
                        MGR,
                        HIREDATE,
                        SAL,
                        COMM};
                this.Rows.Add(rowEmpAndDeptRow);
                return rowEmpAndDeptRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptRow FindByDEPTNO(decimal DEPTNO) {
                return ((EmpAndDeptRow)(this.Rows.Find(new object[] {
                            DEPTNO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmpAndDeptDataTable cln = ((EmpAndDeptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmpAndDeptDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDEPTNO = base.Columns["DEPTNO"];
                this.columnDNAME = base.Columns["DNAME"];
                this.columnLOC = base.Columns["LOC"];
                this.columnEMPNO = base.Columns["EMPNO"];
                this.columnENAME = base.Columns["ENAME"];
                this.columnJOB = base.Columns["JOB"];
                this.columnMGR = base.Columns["MGR"];
                this.columnHIREDATE = base.Columns["HIREDATE"];
                this.columnSAL = base.Columns["SAL"];
                this.columnCOMM = base.Columns["COMM"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDEPTNO = new System.Data.DataColumn("DEPTNO", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPTNO);
                this.columnDNAME = new System.Data.DataColumn("DNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDNAME);
                this.columnLOC = new System.Data.DataColumn("LOC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOC);
                this.columnEMPNO = new System.Data.DataColumn("EMPNO", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPNO);
                this.columnENAME = new System.Data.DataColumn("ENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnENAME);
                this.columnJOB = new System.Data.DataColumn("JOB", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJOB);
                this.columnMGR = new System.Data.DataColumn("MGR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMGR);
                this.columnHIREDATE = new System.Data.DataColumn("HIREDATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHIREDATE);
                this.columnSAL = new System.Data.DataColumn("SAL", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAL);
                this.columnCOMM = new System.Data.DataColumn("COMM", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMM);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDEPTNO}, true));
                this.columnDEPTNO.AllowDBNull = false;
                this.columnDEPTNO.Unique = true;
                this.columnDNAME.MaxLength = 14;
                this.columnLOC.MaxLength = 13;
                this.columnEMPNO.AllowDBNull = false;
                this.columnENAME.MaxLength = 10;
                this.columnJOB.MaxLength = 9;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptRow NewEmpAndDeptRow() {
                return ((EmpAndDeptRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmpAndDeptRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmpAndDeptRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpAndDeptRowChanged != null)) {
                    this.EmpAndDeptRowChanged(this, new EmpAndDeptRowChangeEvent(((EmpAndDeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpAndDeptRowChanging != null)) {
                    this.EmpAndDeptRowChanging(this, new EmpAndDeptRowChangeEvent(((EmpAndDeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpAndDeptRowDeleted != null)) {
                    this.EmpAndDeptRowDeleted(this, new EmpAndDeptRowChangeEvent(((EmpAndDeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpAndDeptRowDeleting != null)) {
                    this.EmpAndDeptRowDeleting(this, new EmpAndDeptRowChangeEvent(((EmpAndDeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpAndDeptRow(EmpAndDeptRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EmployeeDataSet ds = new EmployeeDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpAndDeptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpAndDeptRow : System.Data.DataRow {
            
            private EmpAndDeptDataTable tableEmpAndDept;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpAndDeptRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpAndDept = ((EmpAndDeptDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DEPTNO {
                get {
                    return ((decimal)(this[this.tableEmpAndDept.DEPTNOColumn]));
                }
                set {
                    this[this.tableEmpAndDept.DEPTNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DNAME {
                get {
                    try {
                        return ((string)(this[this.tableEmpAndDept.DNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'DNAME\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.DNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOC {
                get {
                    try {
                        return ((string)(this[this.tableEmpAndDept.LOCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'LOC\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.LOCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMPNO {
                get {
                    return ((decimal)(this[this.tableEmpAndDept.EMPNOColumn]));
                }
                set {
                    this[this.tableEmpAndDept.EMPNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENAME {
                get {
                    try {
                        return ((string)(this[this.tableEmpAndDept.ENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'ENAME\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.ENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JOB {
                get {
                    try {
                        return ((string)(this[this.tableEmpAndDept.JOBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'JOB\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.JOBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MGR {
                get {
                    try {
                        return ((decimal)(this[this.tableEmpAndDept.MGRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'MGR\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.MGRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HIREDATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmpAndDept.HIREDATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'HIREDATE\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.HIREDATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SAL {
                get {
                    try {
                        return ((decimal)(this[this.tableEmpAndDept.SALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'SAL\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.SALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal COMM {
                get {
                    try {
                        return ((decimal)(this[this.tableEmpAndDept.COMMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'EmpAndDept\' にある列 \'COMM\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmpAndDept.COMMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDNAMENull() {
                return this.IsNull(this.tableEmpAndDept.DNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDNAMENull() {
                this[this.tableEmpAndDept.DNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCNull() {
                return this.IsNull(this.tableEmpAndDept.LOCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCNull() {
                this[this.tableEmpAndDept.LOCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENAMENull() {
                return this.IsNull(this.tableEmpAndDept.ENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENAMENull() {
                this[this.tableEmpAndDept.ENAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJOBNull() {
                return this.IsNull(this.tableEmpAndDept.JOBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJOBNull() {
                this[this.tableEmpAndDept.JOBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMGRNull() {
                return this.IsNull(this.tableEmpAndDept.MGRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMGRNull() {
                this[this.tableEmpAndDept.MGRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHIREDATENull() {
                return this.IsNull(this.tableEmpAndDept.HIREDATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHIREDATENull() {
                this[this.tableEmpAndDept.HIREDATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSALNull() {
                return this.IsNull(this.tableEmpAndDept.SALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSALNull() {
                this[this.tableEmpAndDept.SALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMMNull() {
                return this.IsNull(this.tableEmpAndDept.COMMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMMNull() {
                this[this.tableEmpAndDept.COMMColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpAndDeptRowChangeEvent : System.EventArgs {
            
            private EmpAndDeptRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptRowChangeEvent(EmpAndDeptRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAndDeptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Seasar.Dao.Tests.Impl.EmployeeDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmpAndDeptTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmpAndDeptTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmpAndDept";
            tableMapping.ColumnMappings.Add("DEPTNO", "DEPTNO");
            tableMapping.ColumnMappings.Add("DNAME", "DNAME");
            tableMapping.ColumnMappings.Add("LOC", "LOC");
            tableMapping.ColumnMappings.Add("EMPNO", "EMPNO");
            tableMapping.ColumnMappings.Add("ENAME", "ENAME");
            tableMapping.ColumnMappings.Add("JOB", "JOB");
            tableMapping.ColumnMappings.Add("MGR", "MGR");
            tableMapping.ColumnMappings.Add("HIREDATE", "HIREDATE");
            tableMapping.ColumnMappings.Add("SAL", "SAL");
            tableMapping.ColumnMappings.Add("COMM", "COMM");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Properties.Settings.Default.s2dotnetdemoConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT          DEPT.DEPTNO, DEPT.DNAME, DEPT.LOC, EMP.EMPNO, EMP.ENAME, EMP.JOB," +
                " \r\n                      EMP.MGR, EMP.HIREDATE, EMP.SAL, EMP.COMM\r\nFROM         " +
                "   DEPT INNER JOIN\r\n                      EMP ON DEPT.DEPTNO = EMP.DEPTNO";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmployeeDataSet.EmpAndDeptDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmployeeDataSet.EmpAndDeptDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmployeeDataSet.EmpAndDeptDataTable dataTable = new EmployeeDataSet.EmpAndDeptDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591